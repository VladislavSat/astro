// –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä - –ë–ï–ó –í–ù–ï–®–ù–ò–• –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
// –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –ø–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π

console.log('üöÄ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è');

// ================= –ö–û–ù–°–¢–ê–ù–¢–´ =================
const CITIES = {
    moscow: { name: '–ú–æ—Å–∫–≤–∞', lat: 55.7558, lon: 37.6176, tz: 3 },
    spb: { name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', lat: 59.9311, lon: 30.3609, tz: 3 },
    novosibirsk: { name: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', lat: 55.0084, lon: 82.9357, tz: 7 },
    ekaterinburg: { name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', lat: 56.8431, lon: 60.6454, tz: 5 },
    london: { name: '–õ–æ–Ω–¥–æ–Ω', lat: 51.5074, lon: -0.1278, tz: 0 },
    newyork: { name: '–ù—å—é-–ô–æ—Ä–∫', lat: 40.7128, lon: -74.0060, tz: -5 },
    paris: { name: '–ü–∞—Ä–∏–∂', lat: 48.8566, lon: 2.3522, tz: 1 },
    tokyo: { name: '–¢–æ–∫–∏–æ', lat: 35.6762, lon: 139.6503, tz: 9 }
};

const PLANETS = [
    { name: '–°–æ–ª–Ω—Ü–µ', symbol: '‚òâ', meanLon: 280.46, dailyMotion: 0.9856474 },
    { name: '–õ—É–Ω–∞', symbol: '‚òΩ', meanLon: 218.32, dailyMotion: 13.176358 },
    { name: '–ú–µ—Ä–∫—É—Ä–∏–π', symbol: '‚òø', meanLon: 252.25, dailyMotion: 4.092317 },
    { name: '–í–µ–Ω–µ—Ä–∞', symbol: '‚ôÄ', meanLon: 181.98, dailyMotion: 1.602136 },
    { name: '–ú–∞—Ä—Å', symbol: '‚ôÇ', meanLon: 355.43, dailyMotion: 0.524033 },
    { name: '–Æ–ø–∏—Ç–µ—Ä', symbol: '‚ôÉ', meanLon: 34.35, dailyMotion: 0.083056 },
    { name: '–°–∞—Ç—É—Ä–Ω', symbol: '‚ôÑ', meanLon: 50.08, dailyMotion: 0.033371 },
    { name: '–£—Ä–∞–Ω', symbol: '‚ôÖ', meanLon: 314.05, dailyMotion: 0.011698 },
    { name: '–ù–µ–ø—Ç—É–Ω', symbol: '‚ôÜ', meanLon: 304.35, dailyMotion: 0.005965 },
    { name: '–ü–ª—É—Ç–æ–Ω', symbol: '‚ôá', meanLon: 238.93, dailyMotion: 0.003964 }
];

const SIGNS = ['–û–≤–µ–Ω', '–¢–µ–ª–µ—Ü', '–ë–ª–∏–∑–Ω–µ—Ü—ã', '–†–∞–∫', '–õ–µ–≤', '–î–µ–≤–∞', '–í–µ—Å—ã', '–°–∫–æ—Ä–ø–∏–æ–Ω', '–°—Ç—Ä–µ–ª–µ—Ü', '–ö–æ–∑–µ—Ä–æ–≥', '–í–æ–¥–æ–ª–µ–π', '–†—ã–±—ã'];
const SIGN_SYMBOLS = ['‚ôà', '‚ôâ', '‚ôä', '‚ôã', '‚ôå', '‚ôç', '‚ôé', '‚ôè', '‚ôê', '‚ôë', '‚ôí', '‚ôì'];

const ASPECTS = [
    { angle: 0, orb: 8, name: '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ', symbol: '‚òå', nature: '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π' },
    { angle: 60, orb: 6, name: '–°–µ–∫—Å—Ç–∏–ª—å', symbol: '‚öπ', nature: '–≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π' },
    { angle: 90, orb: 8, name: '–ö–≤–∞–¥—Ä–∞—Ç', symbol: '‚ñ°', nature: '–Ω–∞–ø—Ä—è–∂–µ–Ω–Ω—ã–π' },
    { angle: 120, orb: 8, name: '–¢—Ä–∏–Ω', symbol: '‚ñ≥', nature: '–≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π' },
    { angle: 180, orb: 8, name: '–û–ø–ø–æ–∑–∏—Ü–∏—è', symbol: '‚òç', nature: '–Ω–∞–ø—Ä—è–∂–µ–Ω–Ω—ã–π' }
];

const RULERSHIPS = {
    '–°–æ–ª–Ω—Ü–µ': ['–õ–µ–≤'],
    '–õ—É–Ω–∞': ['–†–∞–∫'],
    '–ú–µ—Ä–∫—É—Ä–∏–π': ['–ë–ª–∏–∑–Ω–µ—Ü—ã', '–î–µ–≤–∞'],
    '–í–µ–Ω–µ—Ä–∞': ['–¢–µ–ª–µ—Ü', '–í–µ—Å—ã'],
    '–ú–∞—Ä—Å': ['–û–≤–µ–Ω', '–°–∫–æ—Ä–ø–∏–æ–Ω'],
    '–Æ–ø–∏—Ç–µ—Ä': ['–°—Ç—Ä–µ–ª–µ—Ü', '–†—ã–±—ã'],
    '–°–∞—Ç—É—Ä–Ω': ['–ö–æ–∑–µ—Ä–æ–≥', '–í–æ–¥–æ–ª–µ–π'],
    '–£—Ä–∞–Ω': ['–í–æ–¥–æ–ª–µ–π'],
    '–ù–µ–ø—Ç—É–Ω': ['–†—ã–±—ã'],
    '–ü–ª—É—Ç–æ–Ω': ['–°–∫–æ—Ä–ø–∏–æ–Ω']
};

const EXALTATIONS = {
    '–°–æ–ª–Ω—Ü–µ': '–û–≤–µ–Ω',
    '–õ—É–Ω–∞': '–¢–µ–ª–µ—Ü',
    '–ú–µ—Ä–∫—É—Ä–∏–π': '–î–µ–≤–∞',
    '–í–µ–Ω–µ—Ä–∞': '–†—ã–±—ã',
    '–ú–∞—Ä—Å': '–ö–æ–∑–µ—Ä–æ–≥',
    '–Æ–ø–∏—Ç–µ—Ä': '–†–∞–∫',
    '–°–∞—Ç—É—Ä–Ω': '–í–µ—Å—ã'
};

// ================= –í–°–¢–†–û–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –†–ê–°–ß–ï–¢–û–í =================
class AstroCalculator {
    
    static julianDay(date) {
        const a = Math.floor((14 - date.getUTCMonth() - 1) / 12);
        const y = date.getUTCFullYear() + 4800 - a;
        const m = date.getUTCMonth() + 1 + 12 * a - 3;
        
        return date.getUTCDate() + Math.floor((153 * m + 2) / 5) + 365 * y + 
               Math.floor(y / 4) - Math.floor(y / 100) + Math.floor(y / 400) - 32045 +
               (date.getUTCHours() + date.getUTCMinutes() / 60 + date.getUTCSeconds() / 3600) / 24;
    }
    
    static calculatePlanet(planetData, jd) {
        const T = (jd - 2451545.0) / 36525.0;
        const meanLongitude = planetData.meanLon + planetData.dailyMotion * T * 36525;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –≤–æ–∑–º—É—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        const perturbation = Math.sin(T * 2 * Math.PI) * 2 + Math.cos(T * 3 * Math.PI) * 1;
        
        let longitude = (meanLongitude + perturbation) % 360;
        if (longitude < 0) longitude += 360;
        
        return {
            name: planetData.name,
            symbol: planetData.symbol,
            longitude: longitude,
            latitude: 0
        };
    }
    
    static calculateAscendant(jd, latitude, longitude) {
        const T = (jd - 2451545.0) / 36525.0;
        
        // –ó–≤–µ–∑–¥–Ω–æ–µ –≤—Ä–µ–º—è –ì—Ä–∏–Ω–≤–∏—á–∞
        const theta0 = 280.46061837 + 360.98564736629 * (jd - 2451545.0) + 
                      0.000387933 * T * T - T * T * T / 38710000.0;
        
        // –ú–µ—Å—Ç–Ω–æ–µ –∑–≤–µ–∑–¥–Ω–æ–µ –≤—Ä–µ–º—è
        const lst = (theta0 + longitude) % 360;
        const lstRad = lst * Math.PI / 180;
        const latRad = latitude * Math.PI / 180;
        const obliquity = (23 + 26/60 + 21.448/3600) * Math.PI / 180;
        
        // –†–∞—Å—á–µ—Ç –∞—Å—Ü–µ–Ω–¥–µ–Ω—Ç–∞
        const y = -Math.cos(lstRad);
        const x = Math.sin(lstRad) * Math.cos(obliquity) + Math.tan(latRad) * Math.sin(obliquity);
        
        let ascendant = Math.atan2(y, x) * 180 / Math.PI;
        if (ascendant < 0) ascendant += 360;
        
        // MC –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–µ–Ω LST
        let mc = lst;
        if (mc < 0) mc += 360;
        if (mc >= 360) mc -= 360;
        
        return { ascendant, mc };
    }
    
    static calculateHouses(ascendant, mc, system = 'equal') {
        const houses = [];
        
        for (let i = 1; i <= 12; i++) {
            let cusp;
            
            if (system === 'equal') {
                cusp = (ascendant + (i - 1) * 30) % 360;
            } else if (system === 'whole') {
                const ascSign = Math.floor(ascendant / 30);
                cusp = ((ascSign + i - 1) % 12) * 30;
            } else {
                // Placidus (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                cusp = (ascendant + (i - 1) * 30) % 360;
            }
            
            if (cusp < 0) cusp += 360;
            
            houses.push({
                number: i,
                cusp: cusp,
                sign: this.getZodiacSign(cusp),
                ruler: this.getSignRuler(this.getZodiacSign(cusp))
            });
        }
        
        return houses;
    }
    
    static calculateAspects(planets) {
        const aspects = [];
        
        for (let i = 0; i < planets.length; i++) {
            for (let j = i + 1; j < planets.length; j++) {
                const planet1 = planets[i];
                const planet2 = planets[j];
                
                let diff = Math.abs(planet1.longitude - planet2.longitude);
                if (diff > 180) diff = 360 - diff;
                
                for (const aspectType of ASPECTS) {
                    const orb = Math.abs(diff - aspectType.angle);
                    
                    if (orb <= aspectType.orb) {
                        const accuracy = ((aspectType.orb - orb) / aspectType.orb * 100);
                        
                        aspects.push({
                            planet1: planet1.name,
                            planet2: planet2.name,
                            aspect: aspectType,
                            orb: orb.toFixed(2),
                            accuracy: parseFloat(accuracy.toFixed(1))
                        });
                    }
                }
            }
        }
        
        aspects.sort((a, b) => b.accuracy - a.accuracy);
        return aspects;
    }
    
    static getZodiacSign(longitude) {
        let lon = longitude;
        if (lon < 0) lon += 360;
        if (lon >= 360) lon -= 360;
        const signIndex = Math.floor(lon / 30);
        return SIGNS[signIndex] || SIGNS[0];
    }
    
    static getSignRuler(sign) {
        for (const [planet, signs] of Object.entries(RULERSHIPS)) {
            if (signs.includes(sign)) {
                return planet;
            }
        }
        return "‚Äî";
    }
    
    static getPlanetStrength(planetName, sign) {
        if (EXALTATIONS[planetName] === sign) {
            return { status: 'exalted', text: '–≠–∫–∑–∞–ª—å—Ç–∞—Ü–∏—è', color: '#4ECDC4' };
        }
        
        if (RULERSHIPS[planetName] && RULERSHIPS[planetName].includes(sign)) {
            return { status: 'dignified', text: '–û–±–∏—Ç–µ–ª—å', color: '#66BB6A' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≥–Ω–∞–Ω–∏–µ (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π –∑–Ω–∞–∫ –æ–±–∏—Ç–µ–ª–∏)
        if (RULERSHIPS[planetName]) {
            for (const rulership of RULERSHIPS[planetName]) {
                const ruleIndex = SIGNS.indexOf(rulership);
                const detrimentIndex = (ruleIndex + 6) % 12;
                if (SIGNS[detrimentIndex] === sign) {
                    return { status: 'detriment', text: '–ò–∑–≥–Ω–∞–Ω–∏–µ', color: '#FF7043' };
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–¥–µ–Ω–∏–µ (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π –∑–Ω–∞–∫ —ç–∫–∑–∞–ª—å—Ç–∞—Ü–∏–∏)
        const exaltationSign = EXALTATIONS[planetName];
        if (exaltationSign) {
            const exaltIndex = SIGNS.indexOf(exaltationSign);
            const fallIndex = (exaltIndex + 6) % 12;
            if (SIGNS[fallIndex] === sign) {
                return { status: 'fall', text: '–ü–∞–¥–µ–Ω–∏–µ', color: '#F44336' };
            }
        }
        
        return { status: 'neutral', text: '‚Äî', color: '#FFA726' };
    }
    
    static formatDegrees(longitude) {
        let lon = longitude;
        if (lon < 0) lon += 360;
        if (lon >= 360) lon -= 360;
        
        const degrees = Math.floor(lon % 30);
        const minutes = Math.floor((lon % 1) * 60);
        const seconds = Math.floor(((lon % 1) * 60 % 1) * 60);
        
        return `${degrees}¬∞${minutes.toString().padStart(2, '0')}'${seconds.toString().padStart(2, '0')}"`;
    }
    
    static getPlanetHouse(planetLon, houses) {
        for (let i = 0; i < houses.length; i++) {
            const house = houses[i];
            const nextHouse = houses[(i + 1) % houses.length];
            
            let start = house.cusp;
            let end = nextHouse.cusp;
            
            if (end < start) {
                if (planetLon >= start || planetLon < end) {
                    return house.number;
                }
            } else {
                if (planetLon >= start && planetLon < end) {
                    return house.number;
                }
            }
        }
        return 1;
    }
}

// ================= –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =================
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä');
    initializeApp();
});

function initializeApp() {
    console.log('‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    showStatus('‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ', 'success');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    const now = new Date();
    const dateField = document.getElementById('birth-date');
    const timeField = document.getElementById('birth-time');
    
    if (dateField) dateField.value = now.toISOString().split('T')[0];
    if (timeField) timeField.value = now.toTimeString().split(':').slice(0, 2).join(':');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ú–æ—Å–∫–≤—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const citySelect = document.getElementById('city');
    if (citySelect) {
        citySelect.value = 'moscow';
        updateCoordinates('moscow');
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners();
}

function setupEventListeners() {
    const citySelect = document.getElementById('city');
    const form = document.getElementById('birth-form');
    const coordsSection = document.getElementById('coordinates-section');
    
    if (citySelect) {
        citySelect.addEventListener('change', function(e) {
            if (e.target.value === 'custom') {
                if (coordsSection) coordsSection.style.display = 'block';
            } else {
                if (coordsSection) coordsSection.style.display = 'none';
                updateCoordinates(e.target.value);
            }
        });
    }
    
    if (form) {
        form.addEventListener('submit', handleFormSubmit);
    }
}

function updateCoordinates(cityCode) {
    const city = CITIES[cityCode];
    if (!city) return;
    
    const latField = document.getElementById('latitude');
    const lonField = document.getElementById('longitude');
    const tzField = document.getElementById('timezone');
    
    if (latField) latField.value = city.lat;
    if (lonField) lonField.value = city.lon;
    if (tzField) tzField.value = city.tz;
    
    console.log(`üìç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è ${city.name}: ${city.lat}, ${city.lon}, UTC${city.tz}`);
}

function showStatus(message, type = 'info') {
    const statusDiv = document.getElementById('status');
    if (!statusDiv) return;
    
    statusDiv.innerHTML = `<div class="${type}">${message}</div>`;
    
    setTimeout(() => {
        statusDiv.innerHTML = '';
    }, 5000);
}

// ================= –û–ë–†–ê–ë–û–¢–ö–ê –§–û–†–ú–´ =================
async function handleFormSubmit(event) {
    event.preventDefault();
    
    const button = event.target.querySelector('button[type="submit"]');
    const originalText = button.textContent;
    
    try {
        button.disabled = true;
        button.textContent = 'üîÑ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º...';
        
        const formData = collectFormData();
        console.log('üìä –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData);
        
        const chart = calculateChart(formData);
        console.log('üîÆ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞:', chart);
        
        displayResults(chart, formData);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const resultsSection = document.getElementById('results-section');
        if (resultsSection) {
            resultsSection.classList.remove('hidden');
            resultsSection.scrollIntoView({ behavior: 'smooth' });
        }
        
        showStatus('‚úÖ –ö–∞—Ä—Ç–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 'success');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞:', error);
        showStatus(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
    } finally {
        button.disabled = false;
        button.textContent = originalText;
    }
}

function collectFormData() {
    const cityCode = document.getElementById('city').value;
    let coordinates;
    
    if (cityCode === 'custom') {
        coordinates = {
            lat: parseFloat(document.getElementById('latitude').value),
            lon: parseFloat(document.getElementById('longitude').value),
            tz: parseFloat(document.getElementById('timezone').value)
        };
    } else {
        coordinates = CITIES[cityCode];
    }
    
    if (!coordinates || isNaN(coordinates.lat) || isNaN(coordinates.lon) || isNaN(coordinates.tz)) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–ª–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å');
    }
    
    return {
        date: document.getElementById('birth-date').value,
        time: document.getElementById('birth-time').value,
        lat: coordinates.lat,
        lon: coordinates.lon,
        tz: coordinates.tz,
        cityName: cityCode === 'custom' ? '–†—É—á–Ω–æ–π –≤–≤–æ–¥' : CITIES[cityCode].name,
        houseSystem: document.getElementById('house-system').value
    };
}

// ================= –ê–°–¢–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–ï –†–ê–°–ß–ï–¢–´ =================
function calculateChart(formData) {
    console.log('üßÆ –ù–∞—á–∏–Ω–∞–µ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã —Å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π');
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    const localDateTime = new Date(`${formData.date}T${formData.time}:00`);
    const utcDateTime = new Date(localDateTime.getTime() - formData.tz * 3600000);
    
    console.log(`üïê –ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è: ${localDateTime}`);
    console.log(`üåç UTC –≤—Ä–µ–º—è: ${utcDateTime}`);
    
    const jd = AstroCalculator.julianDay(utcDateTime);
    console.log(`üìÖ –Æ–ª–∏–∞–Ω—Å–∫–∏–π –¥–µ–Ω—å: ${jd}`);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–∞–Ω–µ—Ç—ã
    const planets = PLANETS.map(planetData => 
        AstroCalculator.calculatePlanet(planetData, jd)
    );
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞—Å—Ü–µ–Ω–¥–µ–Ω—Ç –∏ MC
    const { ascendant, mc } = AstroCalculator.calculateAscendant(jd, formData.lat, formData.lon);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–º–∞
    const houses = AstroCalculator.calculateHouses(ascendant, mc, formData.houseSystem);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞—Å–ø–µ–∫—Ç—ã
    const aspects = AstroCalculator.calculateAspects(planets);
    
    return {
        planets,
        houses,
        aspects,
        ascendant,
        mc,
        formData
    };
}

// ================= –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í =================
function displayResults(chart, formData) {
    console.log('üé® –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
    
    try {
        displayBirthInfo(formData, chart);
        displayPlanetsTable(chart);
        displayHousesTable(chart.houses);
        displayAspectsTable(chart.aspects);
        displayInterpretation(chart);
        
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        showStatus('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', 'error');
    }
}

function displayBirthInfo(formData, chart) {
    const content = `
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
            <div><strong>üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</strong><br>${new Date(formData.date + 'T00:00:00').toLocaleDateString('ru-RU')}</div>
            <div><strong>‚è∞ –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è</strong><br>${formData.time}</div>
            <div><strong>üåç –ú–µ—Å—Ç–æ</strong><br>${formData.cityName}</div>
            <div><strong>üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</strong><br>${formData.lat.toFixed(4)}¬∞, ${formData.lon.toFixed(4)}¬∞</div>
            <div><strong>‚åö –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</strong><br>UTC${formData.tz >= 0 ? '+' : ''}${formData.tz}</div>
            <div><strong>üè† –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç</strong><br>${AstroCalculator.formatDegrees(chart.ascendant)} (${AstroCalculator.getZodiacSign(chart.ascendant)})</div>
        </div>
    `;
    
    const element = document.getElementById('birth-info-content');
    if (element) element.innerHTML = content;
}

function displayPlanetsTable(chart) {
    const tbody = document.getElementById('planets-tbody');
    if (!tbody) return;
    
    tbody.innerHTML = '';
    
    chart.planets.forEach(planet => {
        const sign = AstroCalculator.getZodiacSign(planet.longitude);
        const signIndex = SIGNS.indexOf(sign);
        const house = AstroCalculator.getPlanetHouse(planet.longitude, chart.houses);
        const strength = AstroCalculator.getPlanetStrength(planet.name, sign);
        
        const row = document.createElement('tr');
        row.innerHTML = `
            <td><span style="font-size: 1.2em;">${planet.symbol}</span> ${planet.name}</td>
            <td><span style="font-size: 1.2em;">${SIGN_SYMBOLS[signIndex] || ''}</span> ${sign}</td>
            <td>${AstroCalculator.formatDegrees(planet.longitude)}</td>
            <td>${house}</td>
            <td style="color: ${strength.color};">${strength.text}</td>
        `;
        tbody.appendChild(row);
    });
}

function displayHousesTable(houses) {
    const tbody = document.getElementById('houses-tbody');
    if (!tbody) return;
    
    tbody.innerHTML = '';
    
    houses.forEach(house => {
        const signIndex = SIGNS.indexOf(house.sign);
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${house.number}</td>
            <td>${AstroCalculator.formatDegrees(house.cusp)}</td>
            <td><span style="font-size: 1.2em;">${SIGN_SYMBOLS[signIndex] || ''}</span> ${house.sign}</td>
            <td>${house.ruler}</td>
        `;
        tbody.appendChild(row);
    });
}

function displayAspectsTable(aspects) {
    const tbody = document.getElementById('aspects-tbody');
    if (!tbody) return;
    
    tbody.innerHTML = '';
    
    aspects.slice(0, 15).forEach(aspect => {
        const row = document.createElement('tr');
        const natureColor = aspect.aspect.nature === '–≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π' ? '#66BB6A' : 
                           aspect.aspect.nature === '–Ω–∞–ø—Ä—è–∂–µ–Ω–Ω—ã–π' ? '#FF7043' : '#FFA726';
        
        row.innerHTML = `
            <td>${aspect.planet1}</td>
            <td style="color: ${natureColor};"><span style="font-size: 1.2em;">${aspect.aspect.symbol}</span> ${aspect.aspect.name}</td>
            <td>${aspect.planet2}</td>
            <td>${aspect.orb}¬∞</td>
            <td>${aspect.accuracy}%</td>
        `;
        tbody.appendChild(row);
    });
}

function displayInterpretation(chart) {
    let interpretation = '';
    
    const strongPlanets = chart.planets.filter(planet => {
        const sign = AstroCalculator.getZodiacSign(planet.longitude);
        const strength = AstroCalculator.getPlanetStrength(planet.name, sign);
        return strength.status === 'exalted' || strength.status === 'dignified';
    });
    
    const weakPlanets = chart.planets.filter(planet => {
        const sign = AstroCalculator.getZodiacSign(planet.longitude);
        const strength = AstroCalculator.getPlanetStrength(planet.name, sign);
        return strength.status === 'fall' || strength.status === 'detriment';
    });
    
    if (strongPlanets.length > 0) {
        interpretation += `
            <h3>üí™ –°–∏–ª—å–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã (${strongPlanets.length})</h3>
            <p>${strongPlanets.map(planet => {
                const sign = AstroCalculator.getZodiacSign(planet.longitude);
                const strength = AstroCalculator.getPlanetStrength(planet.name, sign);
                return `<strong>${planet.symbol} ${planet.name}</strong> –≤ ${sign} (${strength.text.toLowerCase()}) ‚Äî –ø–ª–∞–Ω–µ—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.`;
            }).join(' ')}</p>
        `;
    }
    
    if (weakPlanets.length > 0) {
        interpretation += `
            <h3>‚ö†Ô∏è –°–ª–∞–±—ã–µ –ø–ª–∞–Ω–µ—Ç—ã (${weakPlanets.length})</h3>
            <p>${weakPlanets.map(planet => {
                const sign = AstroCalculator.getZodiacSign(planet.longitude);
                const strength = AstroCalculator.getPlanetStrength(planet.name, sign);
                return `<strong>${planet.symbol} ${planet.name}</strong> –≤ ${sign} (${strength.text.toLowerCase()}) ‚Äî –ø–ª–∞–Ω–µ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –∏ –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏.`;
            }).join(' ')}</p>
        `;
    }
    
    const majorAspects = chart.aspects.filter(aspect => aspect.accuracy > 80).slice(0, 5);
    
    if (majorAspects.length > 0) {
        interpretation += `
            <h3>‚ú® –í–∞–∂–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã (${majorAspects.length})</h3>
            <ul>${majorAspects.map(aspect => 
                `<li><strong>${aspect.planet1} ${aspect.aspect.symbol} ${aspect.planet2}</strong> (—Ç–æ—á–Ω–æ—Å—Ç—å ${aspect.accuracy}%) ‚Äî ${aspect.aspect.nature} –∞—Å–ø–µ–∫—Ç</li>`
            ).join('')}</ul>
        `;
    }
    
    // –ê–Ω–∞–ª–∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const elementCounts = { fire: 0, earth: 0, air: 0, water: 0 };
    const elements = [
        ['fire', 'fire', 'air', 'water', 'fire', 'earth', 'air', 'water', 'fire', 'earth', 'air', 'water']
    ];
    
    chart.planets.forEach(planet => {
        const signIndex = Math.floor(planet.longitude / 30);
        const element = elements[0][signIndex];
        elementCounts[element]++;
    });
    
    const dominantElement = Object.keys(elementCounts).reduce((a, b) => 
        elementCounts[a] > elementCounts[b] ? a : b
    );
    
    const elementNames = {
        fire: '–û–≥–æ–Ω—å',
        earth: '–ó–µ–º–ª—è', 
        air: '–í–æ–∑–¥—É—Ö',
        water: '–í–æ–¥–∞'
    };
    
    interpretation += `
        <h3>üî• –ê–Ω–∞–ª–∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤</h3>
        <p><strong>–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç:</strong> ${elementNames[dominantElement]} (${elementCounts[dominantElement]} –ø–ª–∞–Ω–µ—Ç)</p>
        <p>–û–≥–æ–Ω—å: ${elementCounts.fire}, –ó–µ–º–ª—è: ${elementCounts.earth}, –í–æ–∑–¥—É—Ö: ${elementCounts.air}, –í–æ–¥–∞: ${elementCounts.water}</p>
    `;
    
    interpretation += `
        <h3>üìã –û–±—â–∏–µ –≤—ã–≤–æ–¥—ã</h3>
        <p>–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—á–µ—Ç–æ–≤. 
        –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ ${chart.aspects.length} –∞—Å–ø–µ–∫—Ç–æ–≤ –º–µ–∂–¥—É –ø–ª–∞–Ω–µ—Ç–∞–º–∏. 
        ${strongPlanets.length > 0 ? `–ï—Å—Ç—å ${strongPlanets.length} —Å–∏–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç, —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã. ` : ''}
        ${weakPlanets.length > 0 ? `${weakPlanets.length} –ø–ª–∞–Ω–µ—Ç —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏. ` : ''}
        –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç –≤ ${AstroCalculator.getZodiacSign(chart.ascendant)} –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–Ω–µ—à–Ω–µ–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏.
        –î–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–º.</p>
    `;
    
    const interpretationElement = document.getElementById('interpretation-content');
    if (interpretationElement) {
        interpretationElement.innerHTML = interpretation;
    }
}

console.log('‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
