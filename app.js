// –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
// –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –Ω–∞–¥–µ–∂–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏

/* ================ –î–ê–ù–ù–´–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ======================= */
const APP_DATA = {
    cities: [
        {name: "–ú–æ—Å–∫–≤–∞", lat: 55.7558, lon: 37.6176, tz: 3, code: "moscow"},
        {name: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", lat: 59.9311, lon: 30.3609, tz: 3, code: "spb"},
        {name: "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", lat: 55.0084, lon: 82.9357, tz: 7, code: "novosibirsk"},
        {name: "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", lat: 56.8431, lon: 60.6454, tz: 5, code: "ekaterinburg"},
        {name: "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", lat: 56.2965, lon: 43.9361, tz: 3, code: "nizhny"},
        {name: "–ö–∞–∑–∞–Ω—å", lat: 55.8304, lon: 49.0661, tz: 3, code: "kazan"},
        {name: "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", lat: 45.0355, lon: 38.9753, tz: 3, code: "krasnodar"},
        {name: "–õ–æ–Ω–¥–æ–Ω", lat: 51.5074, lon: -0.1278, tz: 0, code: "london"},
        {name: "–ù—å—é-–ô–æ—Ä–∫", lat: 40.7128, lon: -74.0060, tz: -5, code: "newyork"},
        {name: "–ü–∞—Ä–∏–∂", lat: 48.8566, lon: 2.3522, tz: 1, code: "paris"},
        {name: "–¢–æ–∫–∏–æ", lat: 35.6762, lon: 139.6503, tz: 9, code: "tokyo"},
        {name: "–î–µ–ª–∏", lat: 28.6139, lon: 77.2090, tz: 5.5, code: "delhi"}
    ],
    planets: ["–°–æ–ª–Ω—Ü–µ", "–õ—É–Ω–∞", "–ú–µ—Ä–∫—É—Ä–∏–π", "–í–µ–Ω–µ—Ä–∞", "–ú–∞—Ä—Å", "–Æ–ø–∏—Ç–µ—Ä", "–°–∞—Ç—É—Ä–Ω", "–£—Ä–∞–Ω", "–ù–µ–ø—Ç—É–Ω", "–ü–ª—É—Ç–æ–Ω"],
    signs: ["–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞", "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–°—Ç—Ä–µ–ª–µ—Ü", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"],
    planetsEn: ["Sun", "Moon", "Mercury", "Venus", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune", "Pluto"],
    planetSymbols: ["‚òâ", "‚òΩ", "‚òø", "‚ôÄ", "‚ôÇ", "‚ôÉ", "‚ôÑ", "‚ôÖ", "‚ôÜ", "‚ôá"],
    signSymbols: ["‚ôà", "‚ôâ", "‚ôä", "‚ôã", "‚ôå", "‚ôç", "‚ôé", "‚ôè", "‚ôê", "‚ôë", "‚ôí", "‚ôì"],
    aspects: {
        conjunction: {angle: 0, orb: 8, name: "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", symbol: "‚òå"},
        sextile: {angle: 60, orb: 6, name: "–°–µ–∫—Å—Ç–∏–ª—å", symbol: "‚öπ"},
        square: {angle: 90, orb: 8, name: "–ö–≤–∞–¥—Ä–∞—Ç", symbol: "‚ñ°"},
        trine: {angle: 120, orb: 8, name: "–¢—Ä–∏–Ω", symbol: "‚ñ≥"},
        opposition: {angle: 180, orb: 8, name: "–û–ø–ø–æ–∑–∏—Ü–∏—è", symbol: "‚òç"}
    },
    rulerships: {
        "–°–æ–ª–Ω—Ü–µ": ["–õ–µ–≤"],
        "–õ—É–Ω–∞": ["–†–∞–∫"],
        "–ú–µ—Ä–∫—É—Ä–∏–π": ["–ë–ª–∏–∑–Ω–µ—Ü—ã", "–î–µ–≤–∞"],
        "–í–µ–Ω–µ—Ä–∞": ["–¢–µ–ª–µ—Ü", "–í–µ—Å—ã"],
        "–ú–∞—Ä—Å": ["–û–≤–µ–Ω", "–°–∫–æ—Ä–ø–∏–æ–Ω"],
        "–Æ–ø–∏—Ç–µ—Ä": ["–°—Ç—Ä–µ–ª–µ—Ü", "–†—ã–±—ã"],
        "–°–∞—Ç—É—Ä–Ω": ["–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π"],
        "–£—Ä–∞–Ω": ["–í–æ–¥–æ–ª–µ–π"],
        "–ù–µ–ø—Ç—É–Ω": ["–†—ã–±—ã"],
        "–ü–ª—É—Ç–æ–Ω": ["–°–∫–æ—Ä–ø–∏–æ–Ω"]
    },
    exaltations: {
        "–°–æ–ª–Ω—Ü–µ": "–û–≤–µ–Ω",
        "–õ—É–Ω–∞": "–¢–µ–ª–µ—Ü", 
        "–ú–µ—Ä–∫—É—Ä–∏–π": "–î–µ–≤–∞",
        "–í–µ–Ω–µ—Ä–∞": "–†—ã–±—ã",
        "–ú–∞—Ä—Å": "–ö–æ–∑–µ—Ä–æ–≥",
        "–Æ–ø–∏—Ç–µ—Ä": "–†–∞–∫",
        "–°–∞—Ç—É—Ä–Ω": "–í–µ—Å—ã"
    }
};

/* ================ –ü–ï–†–ï–ú–ï–ù–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø ===================== */
let currentChart = null;
let signsChart = null;
let strengthChart = null;
let astronomyEngineLoaded = false;

/* ================ –ü–†–û–í–ï–†–ö–ê ASTRONOMY ENGINE ================= */
function checkAstronomyEngine() {
    if (typeof window.Astronomy !== 'undefined' && window.Astronomy.Body) {
        astronomyEngineLoaded = true;
        console.log('‚úÖ Astronomy Engine —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        return true;
    }
    return false;
}

/* ================ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ================== */
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(initializeApp, 1000); // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫
});

function initializeApp() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Astronomy Engine
        if (checkAstronomyEngine()) {
            console.log('üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π');
        } else {
            console.warn('‚ö†Ô∏è Astronomy Engine –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Ç–æ—á–Ω–æ');
        }
        
        initializeForm();
        setupEventListeners();
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ' + error.message);
    }
}

function initializeForm() {
    try {
        const now = new Date();
        const dateStr = now.toISOString().split('T')[0];
        const timeStr = now.toTimeString().split(' ')[0].substring(0, 5);
        
        const dateField = document.getElementById('birth-date');
        const timeField = document.getElementById('birth-time');
        const cityField = document.getElementById('city');
        
        if (dateField) dateField.value = dateStr;
        if (timeField) timeField.value = timeStr;
        if (cityField) {
            cityField.value = 'moscow';
            updateCoordinates('moscow');
        }
        
        console.log('‚úÖ –§–æ—Ä–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã:', error);
    }
}

function setupEventListeners() {
    try {
        const form = document.getElementById('birth-form');
        const citySelect = document.getElementById('city');
        
        if (form) {
            form.addEventListener('submit', handleFormSubmit);
        }
        
        if (citySelect) {
            citySelect.addEventListener('change', handleCityChange);
        }
        
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:', error);
    }
}

function showError(message) {
    let errorDiv = document.getElementById('error-message');
    if (!errorDiv) {
        errorDiv = document.createElement('div');
        errorDiv.id = 'error-message';
        errorDiv.style.cssText = `
            background: #f8d7da;
            color: #721c24;
            padding: 15px;
            margin: 15px 0;
            border: 1px solid #f5c6cb;
            border-radius: 5px;
            font-family: Arial, sans-serif;
        `;
        
        const container = document.querySelector('.container');
        if (container) {
            container.insertBefore(errorDiv, container.firstChild);
        }
    }
    
    errorDiv.innerHTML = `<strong>–û—à–∏–±–∫–∞:</strong> ${message}`;
    errorDiv.style.display = 'block';
    
    setTimeout(() => {
        errorDiv.style.display = 'none';
    }, 10000);
}

function handleCityChange(event) {
    try {
        const cityCode = event.target.value;
        if (cityCode && cityCode !== 'custom') {
            updateCoordinates(cityCode);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –≥–æ—Ä–æ–¥–∞:', error);
    }
}

function updateCoordinates(cityCode) {
    try {
        const city = APP_DATA.cities.find(c => c.code === cityCode);
        if (city) {
            const latField = document.getElementById('latitude');
            const lonField = document.getElementById('longitude');
            const tzField = document.getElementById('timezone');
            
            if (latField) latField.value = city.lat;
            if (lonField) lonField.value = city.lon;
            if (tzField) tzField.value = city.tz;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', error);
    }
}

/* ================ –û–ë–†–ê–ë–û–¢–ö–ê –§–û–†–ú–´ =========================== */
async function handleFormSubmit(event) {
    event.preventDefault();
    
    const button = event.target.querySelector('button[type="submit"]');
    const btnText = button.querySelector('.btn-text');
    const btnLoading = button.querySelector('.btn-loading');
    
    try {
        if (btnText) btnText.classList.add('hidden');
        if (btnLoading) btnLoading.classList.remove('hidden');
        button.disabled = true;
        
        const formData = getFormData();
        
        if (!formData.date || !formData.time || !formData.latitude || !formData.longitude) {
            throw new Error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
        }
        
        const chart = await calculateChart(formData);
        displayResults(chart, formData);
        
        const resultsSection = document.getElementById('results-section');
        if (resultsSection) {
            resultsSection.classList.remove('hidden');
            resultsSection.scrollIntoView({ behavior: 'smooth' });
        }
        
        console.log('‚úÖ –†–∞—Å—á–µ—Ç –∫–∞—Ä—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞:', error);
        showError(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∫–∞—Ä—Ç—ã: ${error.message}`);
    } finally {
        if (btnText) btnText.classList.remove('hidden');
        if (btnLoading) btnLoading.classList.add('hidden');
        button.disabled = false;
    }
}

function getFormData() {
    return {
        date: document.getElementById('birth-date')?.value || '',
        time: document.getElementById('birth-time')?.value || '',
        city: document.getElementById('city')?.value || '',
        latitude: parseFloat(document.getElementById('latitude')?.value || 0),
        longitude: parseFloat(document.getElementById('longitude')?.value || 0),
        timezone: parseFloat(document.getElementById('timezone')?.value || 0),
        houseSystem: document.getElementById('house-system')?.value || 'placidus'
    };
}

/* ================ –ê–°–¢–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–ï –†–ê–°–ß–ï–¢–´ =================== */
async function calculateChart(formData) {
    try {
        const birthDateTime = new Date(`${formData.date}T${formData.time}:00`);
        const utcDateTime = new Date(birthDateTime.getTime() - (formData.timezone * 60 * 60 * 1000));
        
        let planets, ascendant, mc;
        
        if (astronomyEngineLoaded) {
            console.log('üî¨ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É Astronomy Engine');
            const astroDate = new window.Astronomy.AstroTime(utcDateTime);
            planets = await calculatePlanetsWithAstronomy(astroDate);
            const ascMc = calculateAscendantMC(astroDate, formData.latitude, formData.longitude);
            ascendant = ascMc.ascendant;
            mc = ascMc.mc;
        } else {
            console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã');
            planets = calculatePlanetsSimple(utcDateTime);
            const ascMc = calculateAscendantMCSimple(utcDateTime, formData.latitude, formData.longitude);
            ascendant = ascMc.ascendant;
            mc = ascMc.mc;
        }
        
        const houses = calculateHouses(formData.houseSystem, ascendant, mc);
        const aspects = calculateAspects([...planets, {name: "–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç", longitude: ascendant, symbol: "AC"}]);
        
        return {
            planets: [...planets, {name: "–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç", longitude: ascendant, symbol: "AC"}],
            houses,
            aspects,
            formData
        };
    } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö: ${error.message}`);
    }
}

async function calculatePlanetsWithAstronomy(astroDate) {
    const planets = [];
    const planetBodies = [
        window.Astronomy.Body.Sun, window.Astronomy.Body.Moon, window.Astronomy.Body.Mercury,
        window.Astronomy.Body.Venus, window.Astronomy.Body.Mars, window.Astronomy.Body.Jupiter,
        window.Astronomy.Body.Saturn, window.Astronomy.Body.Uranus, window.Astronomy.Body.Neptune,
        window.Astronomy.Body.Pluto
    ];
    
    for (let i = 0; i < planetBodies.length; i++) {
        try {
            const body = planetBodies[i];
            const equatorial = window.Astronomy.Equator(body, astroDate, null, true, true);
            const ecliptic = window.Astronomy.Ecliptic(equatorial);
            
            let longitude = ecliptic.lon;
            if (longitude < 0) longitude += 360;
            if (longitude >= 360) longitude -= 360;
            
            planets.push({
                name: APP_DATA.planets[i],
                nameEn: APP_DATA.planetsEn[i],
                symbol: APP_DATA.planetSymbols[i],
                longitude: longitude,
                latitude: ecliptic.lat,
                isRetrograde: false
            });
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ ${APP_DATA.planets[i]}:`, error);
            planets.push({
                name: APP_DATA.planets[i],
                nameEn: APP_DATA.planetsEn[i],
                symbol: APP_DATA.planetSymbols[i],
                longitude: Math.random() * 360,
                latitude: 0,
                isRetrograde: false
            });
        }
    }
    
    return planets;
}

function calculatePlanetsSimple(utcDateTime) {
    const planets = [];
    const jd = (utcDateTime.getTime() / 86400000) + 2440587.5;
    const T = (jd - 2451545.0) / 36525.0;
    
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥–Ω–∏–µ –¥–æ–ª–≥–æ—Ç—ã –Ω–∞ —ç–ø–æ—Ö—É J2000
    const meanLongitudes = [280.46, 218.32, 252.25, 181.98, 355.43, 34.35, 50.08, 314.05, 304.35, 238.93];
    const dailyMotions = [0.9856, 13.1764, 4.0923, 1.6021, 0.5240, 0.0831, 0.0334, 0.0116, 0.0059, 0.0039];
    
    for (let i = 0; i < APP_DATA.planets.length; i++) {
        let longitude = (meanLongitudes[i] + dailyMotions[i] * T * 36525) % 360;
        if (longitude < 0) longitude += 360;
        
        planets.push({
            name: APP_DATA.planets[i],
            nameEn: APP_DATA.planetsEn[i],
            symbol: APP_DATA.planetSymbols[i],
            longitude: longitude,
            latitude: 0,
            isRetrograde: false
        });
    }
    
    return planets;
}

function calculateAscendantMC(astroDate, latitude, longitude) {
    try {
        const lst = window.Astronomy.SiderealTime(astroDate) + longitude / 15.0;
        const obliquity = 23.4397;
        const latRad = latitude * Math.PI / 180;
        const lstRad = (lst * 15) * Math.PI / 180;
        const oblRad = obliquity * Math.PI / 180;
        
        const y = -Math.cos(lstRad);
        const x = Math.sin(lstRad) * Math.cos(oblRad) + Math.tan(latRad) * Math.sin(oblRad);
        let ascendant = Math.atan2(y, x) * 180 / Math.PI;
        if (ascendant < 0) ascendant += 360;
        
        let mc = lst * 15;
        if (mc >= 360) mc -= 360;
        if (mc < 0) mc += 360;
        
        return { ascendant, mc };
    } catch (error) {
        return calculateAscendantMCSimple(null, latitude, longitude);
    }
}

function calculateAscendantMCSimple(utcDateTime, latitude, longitude) {
    const jd = utcDateTime ? (utcDateTime.getTime() / 86400000) + 2440587.5 : 2451545.0;
    const T = (jd - 2451545.0) / 36525.0;
    const lst = (280.460618 + 360.985647 * (jd - 2451545.0)) / 15.0 + longitude / 15.0;
    
    const latRad = latitude * Math.PI / 180;
    const lstRad = (lst * 15) * Math.PI / 180;
    const oblRad = 23.4397 * Math.PI / 180;
    
    const y = -Math.cos(lstRad);
    const x = Math.sin(lstRad) * Math.cos(oblRad) + Math.tan(latRad) * Math.sin(oblRad);
    let ascendant = Math.atan2(y, x) * 180 / Math.PI;
    if (ascendant < 0) ascendant += 360;
    
    let mc = (lst * 15) % 360;
    if (mc < 0) mc += 360;
    
    return { ascendant, mc };
}

function calculateHouses(system, ascendant, mc) {
    const houses = [];
    
    for (let i = 1; i <= 12; i++) {
        let cusp;
        if (system === 'equal') {
            cusp = (ascendant + (i - 1) * 30) % 360;
        } else {
            cusp = (ascendant + (i - 1) * 30) % 360;
        }
        
        if (cusp < 0) cusp += 360;
        
        houses.push({
            number: i,
            cusp: cusp,
            sign: getZodiacSign(cusp),
            ruler: getSignRuler(getZodiacSign(cusp))
        });
    }
    
    return houses;
}

function calculateAspects(planets) {
    const aspects = [];
    const aspectTypes = Object.values(APP_DATA.aspects);
    
    for (let i = 0; i < planets.length; i++) {
        for (let j = i + 1; j < planets.length; j++) {
            const planet1 = planets[i];
            const planet2 = planets[j];
            
            let diff = Math.abs(planet1.longitude - planet2.longitude);
            if (diff > 180) diff = 360 - diff;
            
            for (const aspectType of aspectTypes) {
                const orb = Math.abs(diff - aspectType.angle);
                
                if (orb <= aspectType.orb) {
                    const accuracy = ((aspectType.orb - orb) / aspectType.orb * 100);
                    
                    aspects.push({
                        planet1: planet1.name,
                        planet2: planet2.name,
                        aspect: aspectType,
                        orb: orb.toFixed(2),
                        accuracy: parseFloat(accuracy.toFixed(1)),
                        exactness: orb < 1 ? 'tight' : orb < 3 ? 'moderate' : 'wide'
                    });
                }
            }
        }
    }
    
    aspects.sort((a, b) => b.accuracy - a.accuracy);
    return aspects;
}

/* ================ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =================== */
function getZodiacSign(longitude) {
    let lon = longitude;
    if (lon < 0) lon += 360;
    if (lon >= 360) lon -= 360;
    const signIndex = Math.floor(lon / 30);
    return APP_DATA.signs[signIndex] || APP_DATA.signs[0];
}

function getSignRuler(sign) {
    for (const [planet, signs] of Object.entries(APP_DATA.rulerships)) {
        if (signs.includes(sign)) {
            return planet;
        }
    }
    return "‚Äî";
}

function getPlanetStrength(planet, sign) {
    if (APP_DATA.exaltations[planet] === sign) {
        return { status: 'exalted', text: '–≠–∫–∑–∞–ª—å—Ç–∞—Ü–∏—è' };
    }
    
    if (APP_DATA.rulerships[planet] && APP_DATA.rulerships[planet].includes(sign)) {
        return { status: 'dignified', text: '–û–±–∏—Ç–µ–ª—å' };
    }
    
    const signIndex = APP_DATA.signs.indexOf(sign);
    if (signIndex >= 0) {
        const oppositeSignIndex = (signIndex + 6) % 12;
        const oppositeSign = APP_DATA.signs[oppositeSignIndex];
        if (APP_DATA.rulerships[planet] && APP_DATA.rulerships[planet].includes(oppositeSign)) {
            return { status: 'detriment', text: '–ò–∑–≥–Ω–∞–Ω–∏–µ' };
        }
    }
    
    const exaltationSign = APP_DATA.exaltations[planet];
    if (exaltationSign) {
        const exaltSignIndex = APP_DATA.signs.indexOf(exaltationSign);
        if (exaltSignIndex >= 0) {
            const fallSignIndex = (exaltSignIndex + 6) % 12;
            const fallSign = APP_DATA.signs[fallSignIndex];
            if (sign === fallSign) {
                return { status: 'fall', text: '–ü–∞–¥–µ–Ω–∏–µ' };
            }
        }
    }
    
    return { status: 'neutral', text: '‚Äî' };
}

function getPlanetHouse(planetLon, houses) {
    try {
        for (let i = 0; i < houses.length; i++) {
            const house = houses[i];
            const nextHouse = houses[(i + 1) % houses.length];
            
            let start = house.cusp;
            let end = nextHouse.cusp;
            
            if (end < start) {
                if (planetLon >= start || planetLon < end) {
                    return house.number;
                }
            } else {
                if (planetLon >= start && planetLon < end) {
                    return house.number;
                }
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ–º–∞:', error);
    }
    return 1;
}

function formatDegrees(longitude) {
    try {
        let lon = longitude;
        if (lon < 0) lon += 360;
        if (lon >= 360) lon -= 360;
        
        const degrees = Math.floor(lon % 30);
        const minutes = Math.floor((lon % 1) * 60);
        const seconds = Math.floor(((lon % 1) * 60 % 1) * 60);
        
        return `${degrees}¬∞${minutes.toString().padStart(2, '0')}'${seconds.toString().padStart(2, '0')}"`;
    } catch (error) {
        return "0¬∞00'00\"";
    }
}

/* ================ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í =================== */
function displayResults(chart, formData) {
    try {
        displayBirthInfo(formData);
        displayPlanetsTable(chart);
        displayHousesTable(chart.houses);
        displayAspectsTable(chart.aspects);
        displayCharts(chart);
        displayInterpretation(chart);
        
        currentChart = chart;
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
        showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    }
}

function displayBirthInfo(formData) {
    try {
        const city = APP_DATA.cities.find(c => c.code === formData.city);
        const cityName = city ? city.name : '–†—É—á–Ω–æ–π –≤–≤–æ–¥';
        
        const content = `
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                <div><strong>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</strong><br>${new Date(formData.date + 'T00:00:00').toLocaleDateString('ru-RU')}</div>
                <div><strong>–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è</strong><br>${formData.time}</div>
                <div><strong>–ú–µ—Å—Ç–æ</strong><br>${cityName}</div>
                <div><strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</strong><br>${formData.latitude.toFixed(4)}¬∞, ${formData.longitude.toFixed(4)}¬∞</div>
                <div><strong>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</strong><br>UTC${formData.timezone >= 0 ? '+' : ''}${formData.timezone}</div>
                <div><strong>–°–∏—Å—Ç–µ–º–∞ –¥–æ–º–æ–≤</strong><br>${document.getElementById('house-system').selectedOptions[0].text}</div>
            </div>
        `;
        
        const element = document.getElementById('birth-info-content');
        if (element) element.innerHTML = content;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–∂–¥–µ–Ω–∏–∏:', error);
    }
}

function displayPlanetsTable(chart) {
    try {
        const tbody = document.getElementById('planets-tbody');
        if (!tbody) return;
        
        tbody.innerHTML = '';
        
        chart.planets.forEach(planet => {
            if (planet.name === "–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç") return;
            
            const sign = getZodiacSign(planet.longitude);
            const signIndex = APP_DATA.signs.indexOf(sign);
            const house = getPlanetHouse(planet.longitude, chart.houses);
            const strength = getPlanetStrength(planet.name, sign);
            
            const row = document.createElement('tr');
            row.innerHTML = `
                <td><span class="planet-symbol">${planet.symbol}</span> ${planet.name}</td>
                <td><span class="sign-symbol">${APP_DATA.signSymbols[signIndex] || ''}</span> ${sign}</td>
                <td>${formatDegrees(planet.longitude)} <span class="retrograde">${planet.isRetrograde ? 'R' : 'D'}</span></td>
                <td>${house}</td>
                <td>${strength.text}</td>
            `;
            tbody.appendChild(row);
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–ª–∞–Ω–µ—Ç:', error);
    }
}

function displayHousesTable(houses) {
    try {
        const tbody = document.getElementById('houses-tbody');
        if (!tbody) return;
        
        tbody.innerHTML = '';
        
        houses.forEach(house => {
            const signIndex = APP_DATA.signs.indexOf(house.sign);
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${house.number}</td>
                <td>${formatDegrees(house.cusp)}</td>
                <td><span class="sign-symbol">${APP_DATA.signSymbols[signIndex] || ''}</span> ${house.sign}</td>
                <td>${house.ruler}</td>
            `;
            tbody.appendChild(row);
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–æ–º–æ–≤:', error);
    }
}

function displayAspectsTable(aspects) {
    try {
        const tbody = document.getElementById('aspects-tbody');
        if (!tbody) return;
        
        tbody.innerHTML = '';
        
        aspects.slice(0, 20).forEach(aspect => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${aspect.planet1}</td>
                <td><span class="aspect-symbol">${aspect.aspect.symbol}</span> ${aspect.aspect.name}</td>
                <td>${aspect.planet2}</td>
                <td>${aspect.orb}¬∞</td>
                <td>${aspect.accuracy}%</td>
            `;
            tbody.appendChild(row);
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∞—Å–ø–µ–∫—Ç–æ–≤:', error);
    }
}

function displayCharts(chart) {
    try {
        if (typeof Chart === 'undefined') {
            console.warn('‚ö†Ô∏è Chart.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –¥–∏–∞–≥—Ä–∞–º–º—ã –Ω–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã');
            return;
        }
        
        createSignsChart(chart);
        createStrengthChart(chart);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º:', error);
    }
}

function createSignsChart(chart) {
    try {
        const ctx = document.getElementById('signs-chart');
        if (!ctx) return;
        
        if (signsChart) {
            signsChart.destroy();
        }
        
        const signCounts = new Array(12).fill(0);
        chart.planets.forEach(planet => {
            if (planet.name !== "–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç") {
                const signIndex = Math.floor(planet.longitude / 30);
                if (signIndex >= 0 && signIndex < 12) {
                    signCounts[signIndex]++;
                }
            }
        });
        
        signsChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: APP_DATA.signs,
                datasets: [{
                    data: signCounts,
                    backgroundColor: [
                        '#1FB8CD', '#FFC185', '#B4413C', '#ECEBD5', '#5D878F', '#DB4545',
                        '#D2BA4C', '#964325', '#944454', '#13343B', '#1FB8CD', '#FFC185'
                    ],
                    borderWidth: 2,
                    borderColor: '#fff'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            boxWidth: 12,
                            padding: 15,
                            color: '#f5f5f5'
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return `${context.label}: ${context.parsed} –ø–ª–∞–Ω–µ—Ç`;
                            }
                        }
                    }
                }
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã –∑–Ω–∞–∫–æ–≤:', error);
    }
}

function createStrengthChart(chart) {
    try {
        const ctx = document.getElementById('strength-chart');
        if (!ctx) return;
        
        if (strengthChart) {
            strengthChart.destroy();
        }
        
        const planetNames = [];
        const strengthValues = [];
        const colors = [];
        
        chart.planets.forEach(planet => {
            if (planet.name !== "–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç") {
                const sign = getZodiacSign(planet.longitude);
                const strength = getPlanetStrength(planet.name, sign);
                
                let value = 2;
                let color = '#5D878F';
                
                switch (strength.status) {
                    case 'exalted': value = 4; color = '#1FB8CD'; break;
                    case 'dignified': value = 3; color = '#FFC185'; break;
                    case 'neutral': value = 2; color = '#ECEBD5'; break;
                    case 'detriment': value = 1; color = '#D2BA4C'; break;
                    case 'fall': value = 0; color = '#B4413C'; break;
                }
                
                planetNames.push(planet.name);
                strengthValues.push(value);
                colors.push(color);
            }
        });
        
        strengthChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: planetNames,
                datasets: [{
                    label: '–°–∏–ª–∞ –ø–ª–∞–Ω–µ—Ç—ã',
                    data: strengthValues,
                    backgroundColor: colors,
                    borderColor: colors,
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 4,
                        ticks: {
                            stepSize: 1,
                            callback: function(value) {
                                const labels = ['–ü–∞–¥–µ–Ω–∏–µ', '–ò–∑–≥–Ω–∞–Ω–∏–µ', '–ù–µ–π—Ç—Ä–∞–ª—å', '–û–±–∏—Ç–µ–ª—å', '–≠–∫–∑–∞–ª—å—Ç–∞—Ü–∏—è'];
                                return labels[value] || '';
                            },
                            color: '#f5f5f5'
                        },
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'
                        }
                    },
                    x: {
                        ticks: {
                            color: '#f5f5f5'
                        },
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const labels = ['–ü–∞–¥–µ–Ω–∏–µ', '–ò–∑–≥–Ω–∞–Ω–∏–µ', '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è', '–û–±–∏—Ç–µ–ª—å', '–≠–∫–∑–∞–ª—å—Ç–∞—Ü–∏—è'];
                                return `${labels[context.parsed.y]} –ø–æ–∑–∏—Ü–∏—è`;
                            }
                        }
                    }
                }
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã —Å–∏–ª—ã:', error);
    }
}

function displayInterpretation(chart) {
    try {
        let interpretation = '';
        
        const strongPlanets = chart.planets.filter(planet => {
            if (planet.name === "–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç") return false;
            const sign = getZodiacSign(planet.longitude);
            const strength = getPlanetStrength(planet.name, sign);
            return strength.status === 'exalted' || strength.status === 'dignified';
        });
        
        if (strongPlanets.length > 0) {
            interpretation += `
                <h3>–°–∏–ª—å–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã</h3>
                <p>${strongPlanets.map(planet => {
                    const sign = getZodiacSign(planet.longitude);
                    const strength = getPlanetStrength(planet.name, sign);
                    return `<strong>${planet.name}</strong> –≤ ${sign} (${strength.text.toLowerCase()}) ‚Äî –ø–ª–∞–Ω–µ—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.`;
                }).join(' ')}</p>
            `;
        }
        
        const weakPlanets = chart.planets.filter(planet => {
            if (planet.name === "–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç") return false;
            const sign = getZodiacSign(planet.longitude);
            const strength = getPlanetStrength(planet.name, sign);
            return strength.status === 'fall' || strength.status === 'detriment';
        });
        
        if (weakPlanets.length > 0) {
            interpretation += `
                <h3>–°–ª–∞–±—ã–µ –ø–ª–∞–Ω–µ—Ç—ã</h3>
                <p>${weakPlanets.map(planet => {
                    const sign = getZodiacSign(planet.longitude);
                    const strength = getPlanetStrength(planet.name, sign);
                    return `<strong>${planet.name}</strong> –≤ ${sign} (${strength.text.toLowerCase()}) ‚Äî –ø–ª–∞–Ω–µ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –∏ –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏.`;
                }).join(' ')}</p>
            `;
        }
        
        const majorAspects = chart.aspects.filter(aspect => aspect.accuracy > 80).slice(0, 5);
        
        if (majorAspects.length > 0) {
            interpretation += `
                <h3>–í–∞–∂–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã</h3>
                <p>${majorAspects.map(aspect => 
                    `<strong>${aspect.planet1} ${aspect.aspect.symbol} ${aspect.planet2}</strong> (—Ç–æ—á–Ω–æ—Å—Ç—å ${aspect.accuracy}%) ‚Äî ${getAspectInterpretation(aspect)}`
                ).join('<br>')}</p>
            `;
        }
        
        interpretation += `
            <h3>–û–±—â–∏–µ –≤—ã–≤–æ–¥—ã</h3>
            <p>–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ ${astronomyEngineLoaded ? '—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Astronomy Engine' : '—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤'}. 
            –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ ${chart.aspects.length} –∞—Å–ø–µ–∫—Ç–æ–≤ –º–µ–∂–¥—É –ø–ª–∞–Ω–µ—Ç–∞–º–∏. 
            ${strongPlanets.length > 0 ? `–ï—Å—Ç—å ${strongPlanets.length} —Å–∏–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç, —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã. ` : ''}
            ${weakPlanets.length > 0 ? `${weakPlanets.length} –ø–ª–∞–Ω–µ—Ç —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏. ` : ''}
            –î–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–º.</p>
        `;
        
        const interpretationElement = document.getElementById('interpretation-content');
        if (interpretationElement) {
            interpretationElement.innerHTML = interpretation;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏:', error);
    }
}

function getAspectInterpretation(aspect) {
    const interpretations = {
        '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ': '–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–π, —É—Å–∏–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤',
        '–°–µ–∫—Å—Ç–∏–ª—å': '–≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
        '–ö–≤–∞–¥—Ä–∞—Ç': '–Ω–∞–ø—Ä—è–∂–µ–Ω–Ω—ã–π –∞—Å–ø–µ–∫—Ç, —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏',
        '–¢—Ä–∏–Ω': '–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏—è, –ª–µ–≥–∫–æ—Å—Ç—å –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è',
        '–û–ø–ø–æ–∑–∏—Ü–∏—è': '–ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞'
    };
    
    return interpretations[aspect.aspect.name] || '—Ç—Ä–µ–±—É–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞';
}

console.log('‚úÖ app.js –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
