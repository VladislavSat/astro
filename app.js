/* app.js ‚Äì –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è astronomyReady –∏–ª–∏ fallback */
console.log("üì¶ app.js –∑–∞–≥—Ä—É–∂–µ–Ω");

const CITIES={
  moscow:{lat:55.7558,lon:37.6176,tz:3},
  spb:{lat:59.9311,lon:30.3609,tz:3},
  london:{lat:51.5074,lon:-0.1278,tz:0},
  tokyo:{lat:35.6762,lon:139.6503,tz:9}
};
const PLANETS=["Sun","Moon","Mercury","Venus","Mars","Jupiter","Saturn","Uranus","Neptune","Pluto"];
const NAMES  =["–°–æ–ª–Ω—Ü–µ","–õ—É–Ω–∞","–ú–µ—Ä–∫—É—Ä–∏–π","–í–µ–Ω–µ—Ä–∞","–ú–∞—Ä—Å","–Æ–ø–∏—Ç–µ—Ä","–°–∞—Ç—É—Ä–Ω","–£—Ä–∞–Ω","–ù–µ–ø—Ç—É–Ω","–ü–ª—É—Ç–æ–Ω"];
const SYMBOL =["‚òâ","‚òΩ","‚òø","‚ôÄ","‚ôÇ","‚ôÉ","‚ôÑ","‚ôÖ","‚ôÜ","‚ôá"];
const SIGNS  =["–û–≤–µ–Ω","–¢–µ–ª–µ—Ü","–ë–ª–∏–∑–Ω–µ—Ü—ã","–†–∞–∫","–õ–µ–≤","–î–µ–≤–∞","–í–µ—Å—ã","–°–∫–æ—Ä–ø–∏–æ–Ω","–°—Ç—Ä–µ–ª–µ—Ü","–ö–æ–∑–µ—Ä–æ–≥","–í–æ–¥–æ–ª–µ–π","–†—ã–±—ã"];

let profMode=false;     // true = astronomy-engine –¥–æ—Å—Ç—É–ø–Ω–∞

/* ---- –∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è ---- */
window.addEventListener("astronomyReady",()=>{profMode=true;start();});
window.addEventListener("astronomyLoadFailed",start);

function start(){
  document.getElementById("status").innerHTML=
    `<div class="${profMode?"success":"warn"}">${profMode?"‚úÖ –ü—Ä–æ—Ñ–∏-–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞":"‚ö†Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ä–µ–∂–∏–º"}</div>`;
  initForm();
}

/* ---- –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã ---- */
function initForm(){
  const d=new Date();
  id("date").value=d.toISOString().slice(0,10);
  id("time").value=d.toTimeString().slice(0,5);
  fillCity("moscow");

  id("city").onchange=e=>{
    if(e.target.value==="custom") qs("#coords").classList.remove("hidden");
    else{ qs("#coords").classList.add("hidden"); fillCity(e.target.value);}
  };

  id("form").onsubmit=e=>{
    e.preventDefault();
    calcChart(getFormData());
  };
}

/* ---- helpers ---- */
const id = s=>document.getElementById(s);
const qs = s=>document.querySelector(s);

function fillCity(code){
  const c=CITIES[code]; if(!c) return;
  id("lat").value=c.lat; id("lon").value=c.lon; id("tz").value=c.tz;
}

function getFormData(){
  const city=id("city").value;
  const c=city==="custom"?{
    lat:+id("lat").value,lon:+id("lon").value,tz:+id("tz").value
  }:CITIES[city];
  return{
    date:id("date").value,
    time:id("time").value,
    ...c,
    housesys:id("housesys").value
  };
}

/* ---- —Ä–∞—Å—á—ë—Ç –∫–∞—Ä—Ç—ã ---- */
function calcChart(fd){
  const local=new Date(`${fd.date}T${fd.time}:00`);
  const utc=new Date(local.getTime()-fd.tz*3600000);

  let planets=[];
  if(profMode){
    const T=new Astronomy.AstroTime(utc);
    planets=PLANETS.map((b,i)=>{
      const eq=Astronomy.Equator(Astronomy.Body[b],T,null,true,true);
      const ec=Astronomy.Ecliptic(eq);
      return {name:NAMES[i],sym:SYMBOL[i],lon:(ec.lon+360)%360};
    });
  }else{
    const jd=utc.getTime()/86400000+2440587.5;
    planets=PLANETS.map((_,i)=>{
      const lon=(jd*13+i*30)%360;
      return {name:NAMES[i],sym:SYMBOL[i],lon};
    });
  }

  render(fd,planets);
}

/* ---- –≤—ã–≤–æ–¥ ---- */
function render(fd,pl){
  id("out").classList.remove("hidden");
  id("info").innerHTML=
    `${fd.date} ${fd.time} UTC${fd.tz>=0?"+":""}${fd.tz}<br>
     Lat ${fd.lat}¬∞, Lon ${fd.lon}¬∞<br>
     –†–µ–∂–∏–º: ${profMode?"–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π":"—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π"}`;

  const rows=pl.map(p=>{
    const sign=SIGNS[Math.floor(p.lon/30)];
    const deg=(p.lon%30).toFixed(1);
    return `<tr><td>${p.sym} ${p.name}</td><td>${sign}</td><td>${deg}¬∞</td></tr>`;
  }).join("");
  id("planets").innerHTML="<tr><th>–ü–ª–∞–Ω–µ—Ç–∞</th><th>–ó–Ω–∞–∫</th><th>–ü–æ–∑–∏—Ü–∏—è</th></tr>"+rows;
}
