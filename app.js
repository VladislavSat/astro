window.addEventListener('AstroReady', initApp);

const PLANETS = ['Sun','Moon','Mercury','Venus','Mars','Jupiter','Saturn','Uranus','Neptune','Pluto'];
const P_NAMES = ['–°–æ–ª–Ω—Ü–µ','–õ—É–Ω–∞','–ú–µ—Ä–∫—É—Ä–∏–π','–í–µ–Ω–µ—Ä–∞','–ú–∞—Ä—Å','–Æ–ø–∏—Ç–µ—Ä','–°–∞—Ç—É—Ä–Ω','–£—Ä–∞–Ω','–ù–µ–ø—Ç—É–Ω','–ü–ª—É—Ç–æ–Ω'];
const P_SIGN  = ['‚òâ','‚òΩ','‚òø','‚ôÄ','‚ôÇ','‚ôÉ','‚ôÑ','‚ôÖ','‚ôÜ','‚ôá'];
const SIGNS   = ['–û–≤–µ–Ω','–¢–µ–ª–µ—Ü','–ë–ª–∏–∑–Ω–µ—Ü—ã','–†–∞–∫','–õ–µ–≤','–î–µ–≤–∞','–í–µ—Å—ã','–°–∫–æ—Ä–ø–∏–æ–Ω','–°—Ç—Ä–µ–ª–µ—Ü','–ö–æ–∑–µ—Ä–æ–≥','–í–æ–¥–æ–ª–µ–π','–†—ã–±—ã'];
const S_SYMBOL= ['‚ôà','‚ôâ','‚ôä','‚ôã','‚ôå','‚ôç','‚ôé','‚ôè','‚ôê','‚ôë','‚ôí','‚ôì'];

const CITIES  = {
  moscow: {lat: 55.7558, lon: 37.6176, tz: 3},
  spb:    {lat: 59.9311, lon: 30.3609, tz: 3},
  london: {lat: 51.5074, lon: -0.1278, tz: 0},
  tokyo:  {lat: 35.6762, lon: 139.6503, tz: 9}
};

const id = s => document.getElementById(s);

function initApp(){
  console.log('‚úÖ Astronomy Engine –≥–æ—Ç–æ–≤–∞ (–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)');

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
  const now = new Date();
  id('birth-date').value = now.toISOString().slice(0,10);
  id('birth-time').value = now.toTimeString().slice(0,5);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ú–æ—Å–∫–≤—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  fillCoords('moscow');

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –≥–æ—Ä–æ–¥–∞
  id('city').addEventListener('change', function(e) {
    if(e.target.value === 'custom') {
      id('manual').style.display = 'flex';
    } else {
      id('manual').style.display = 'none';
      fillCoords(e.target.value);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  id('birth-form').addEventListener('submit', function(e) {
    e.preventDefault();
    try {
      const data = collectForm();
      console.log('üìä –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);
      const chart = calcChart(data);
      console.log('üîÆ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞:', chart);
      render(chart, data);
    } catch(error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
      alert('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: ' + error.message);
    }
  });
}

function fillCoords(cityCode) {
  const city = CITIES[cityCode];
  if (city) {
    id('latitude').value = city.lat;
    id('longitude').value = city.lon;
    id('timezone').value = city.tz;
    console.log(`üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è ${cityCode}:`, city);
  }
}

function collectForm() {
  const cityCode = id('city').value;
  let coords;
  
  if (cityCode === 'custom') {
    coords = {
      lat: parseFloat(id('latitude').value),
      lon: parseFloat(id('longitude').value),
      tz: parseFloat(id('timezone').value)
    };
  } else {
    coords = CITIES[cityCode];
  }

  return {
    date: id('birth-date').value,
    time: id('birth-time').value,
    lat: coords.lat,
    lon: coords.lon,
    tz: coords.tz,
    system: id('house-system').value
  };
}

function calcChart(fd) {
  console.log('üßÆ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏:', fd);
  
  const local = new Date(`${fd.date}T${fd.time}:00`);
  const utc = new Date(local.getTime() - fd.tz * 3600000);
  const T = new Astronomy.AstroTime(utc);

  console.log('üïê –í—Ä–µ–º—è:', {local: local.toString(), utc: utc.toString()});

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–∞–Ω–µ—Ç—ã
  const planets = PLANETS.map((bodyName, i) => {
    const body = Astronomy.Body[bodyName];
    const eq = Astronomy.Equator(body, T, null, true, true);
    const ec = Astronomy.Ecliptic(eq);
    let lon = ec.lon;
    if (lon < 0) lon += 360;
    if (lon >= 360) lon -= 360;

    return {
      name: P_NAMES[i],
      nameEn: bodyName,
      symbol: P_SIGN[i],
      longitude: lon
    };
  });

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞—Å—Ü–µ–Ω–¥–µ–Ω—Ç
  const lst = Astronomy.SiderealTime(T) + fd.lon / 15.0;
  const latRad = fd.lat * Math.PI / 180;
  const lstRad = lst * 15 * Math.PI / 180;
  const oblRad = 23.4397 * Math.PI / 180;

  const y = -Math.cos(lstRad);
  const x = Math.sin(lstRad) * Math.cos(oblRad) + Math.tan(latRad) * Math.sin(oblRad);
  let asc = Math.atan2(y, x) * 180 / Math.PI;
  if (asc < 0) asc += 360;

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–º–∞ (Equal House)
  const houses = [];
  for (let i = 1; i <= 12; i++) {
    const cusp = (asc + (i - 1) * 30) % 360;
    houses.push({
      number: i,
      cusp: cusp,
      sign: SIGNS[Math.floor(cusp / 30)]
    });
  }

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞—Å–ø–µ–∫—Ç—ã
  const aspects = [];
  for (let i = 0; i < planets.length; i++) {
    for (let j = i + 1; j < planets.length; j++) {
      let diff = Math.abs(planets[i].longitude - planets[j].longitude);
      if (diff > 180) diff = 360 - diff;

      const aspectTypes = [
        {angle: 0, orb: 8, name: '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ', symbol: '‚òå'},
        {angle: 60, orb: 6, name: '–°–µ–∫—Å—Ç–∏–ª—å', symbol: '‚öπ'},
        {angle: 90, orb: 8, name: '–ö–≤–∞–¥—Ä–∞—Ç', symbol: '‚ñ°'},
        {angle: 120, orb: 8, name: '–¢—Ä–∏–Ω', symbol: '‚ñ≥'},
        {angle: 180, orb: 8, name: '–û–ø–ø–æ–∑–∏—Ü–∏—è', symbol: '‚òç'}
      ];

      aspectTypes.forEach(asp => {
        const orb = Math.abs(diff - asp.angle);
        if (orb <= asp.orb) {
          aspects.push({
            planet1: planets[i].name,
            planet2: planets[j].name,
            type: asp.name,
            symbol: asp.symbol,
            orb: orb.toFixed(1)
          });
        }
      });
    }
  }

  aspects.sort((a, b) => parseFloat(a.orb) - parseFloat(b.orb));

  return { planets, houses, aspects, asc };
}

function render(chart, fd) {
  console.log('üé® –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
  
  id('results').classList.remove('hidden');

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–∂–¥–µ–Ω–∏–∏
  const cityName = id('city').selectedOptions[0].text;
  id('birth-info').innerHTML = `
    <p><strong>üìÖ –î–∞—Ç–∞:</strong> ${new Date(fd.date).toLocaleDateString('ru-RU')}</p>
    <p><strong>‚è∞ –í—Ä–µ–º—è:</strong> ${fd.time}</p>
    <p><strong>üåç –ú–µ—Å—Ç–æ:</strong> ${cityName}</p>
    <p><strong>üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> ${fd.lat.toFixed(4)}¬∞, ${fd.lon.toFixed(4)}¬∞</p>
    <p><strong>‚åö –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</strong> UTC${fd.tz >= 0 ? '+' : ''}${fd.tz}</p>
    <p><strong>üè† –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç:</strong> ${chart.asc.toFixed(1)}¬∞ (${SIGNS[Math.floor(chart.asc / 30)]})</p>
  `;

  // –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞–Ω–µ—Ç
  const planetRows = chart.planets.map(p => {
    const signIndex = Math.floor(p.longitude / 30);
    const sign = SIGNS[signIndex];
    const symbol = S_SYMBOL[signIndex];
    const degrees = (p.longitude % 30).toFixed(1);
    return `<tr>
      <td>${p.symbol} ${p.name}</td>
      <td>${symbol} ${sign}</td>
      <td>${degrees}¬∞</td>
    </tr>`;
  }).join('');
  id('planets').innerHTML = `
    <tr><th>–ü–ª–∞–Ω–µ—Ç–∞</th><th>–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞</th><th>–ü–æ–∑–∏—Ü–∏—è</th></tr>
    ${planetRows}
  `;

  // –¢–∞–±–ª–∏—Ü–∞ –¥–æ–º–æ–≤
  const houseRows = chart.houses.map(h => {
    const signIndex = Math.floor(h.cusp / 30);
    const symbol = S_SYMBOL[signIndex];
    const degrees = (h.cusp % 30).toFixed(1);
    return `<tr>
      <td>${h.number}</td>
      <td>${symbol} ${h.sign}</td>
      <td>${degrees}¬∞</td>
    </tr>`;
  }).join('');
  id('houses').innerHTML = `
    <tr><th>–î–æ–º</th><th>–ó–Ω–∞–∫</th><th>–ö—É—Å–ø–∏–¥</th></tr>
    ${houseRows}
  `;

  // –¢–∞–±–ª–∏—Ü–∞ –∞—Å–ø–µ–∫—Ç–æ–≤
  const aspectRows = chart.aspects.slice(0, 15).map(a => {
    return `<tr>
      <td>${a.planet1}</td>
      <td>${a.symbol} ${a.type}</td>
      <td>${a.planet2}</td>
      <td>${a.orb}¬∞</td>
    </tr>`;
  }).join('');
  id('aspects').innerHTML = `
    <tr><th>–ü–ª–∞–Ω–µ—Ç–∞ 1</th><th>–ê—Å–ø–µ–∫—Ç</th><th>–ü–ª–∞–Ω–µ—Ç–∞ 2</th><th>–û—Ä–±</th></tr>
    ${aspectRows}
  `;

  // –î–∏–∞–≥—Ä–∞–º–º–∞
  const signCounts = Array(12).fill(0);
  chart.planets.forEach(p => {
    const signIndex = Math.floor(p.longitude / 30);
    signCounts[signIndex]++;
  });

  new Chart(id('signs-chart'), {
    type: 'doughnut',
    data: {
      labels: SIGNS,
      datasets: [{
        data: signCounts,
        backgroundColor: [
          '#FF6B6B', '#4ECDC4', '#45B7D1', '#FFA726', '#AB47BC', '#66BB6A',
          '#FFCA28', '#FF7043', '#8D6E63', '#78909C', '#A1887F', '#90A4AE'
        ],
        borderWidth: 2,
        borderColor: '#fff'
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: 'bottom',
          labels: { color: '#fff', boxWidth: 12 }
        }
      }
    }
  });

  console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
}
